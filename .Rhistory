sel_sort <- function(v) {
for (i in 1:length(v)) {
minIdx = i
minValue = v[i]
j = i + 1
while (j <= length(v)) {
if(minValue > v[j]){
minIdx = j
minValue = v[j]
}
j = j + 1
}
temp = v[i]
v[i] = v[minIdx]
v[minIdx] = temp
cat("Partially sorted list = ", v, "\n")
}
cat("Sorted list = ", v)
}
v <- round(rnorm(10), 2)
sel_sort(v)
v <- round(rnorm(1000), 2)
sel_sort(v)
View(sel_sort)
View(sel_sort)
sort(v)
sys.time(sort(v))
Sys.time(sort(v))
Sys.time(sort(v))
system.time(sort(v))
system.time(sel_sort(v))
n = 1000
x1 = runif(n, min =0 , max =1 )
y1 = runif(n, min =0 , max =1 )
f1 <- ((sin(10*x1^2))^2*sin(x1))*x1+0.1
plot(x1[(y1 > f1)],y1[(y1 > f1)],col='yellow',pch=20)
points(x1[(y1 <= f1)],y1[(y1 <= f1)],col='blue',pch=20)
f <- function(x) ((sin(10*x^2))^2*sin(x))*x+0.1
curve(f,0,1,n=100,col='red',lwd=5,add=TRUE)
area_below/n
area_below = length(y1[(y1<=f1)])
area_below/n
n = 10000
x1 = runif(n, min =0 , max =1 )
y1 = runif(n, min =0 , max =1 )
f1 <- ((sin(10*x1^2))^2*sin(x1))*x1+0.1
plot(x1[(y1 > f1)],y1[(y1 > f1)],col='yellow',pch=20)
points(x1[(y1 <= f1)],y1[(y1 <= f1)],col='blue',pch=20)
f <- function(x) ((sin(10*x^2))^2*sin(x))*x+0.1
curve(f,0,1,n=100,col='red',lwd=5,add=TRUE)
area_below = length(y1[(y1<=f1)])
area_below/n
n = 10000
x1 = runif(n, min =0 , max =1 )
y1 = runif(n, min =0 , max =1 )
f1 <- 1/x1
plot(x1[(y1 > f1)],y1[(y1 > f1)],col='yellow',pch=20)
points(x1[(y1 <= f1)],y1[(y1 <= f1)],col='blue',pch=20)
f <- function(x) 1/x
curve(f,0,1,n=100,col='red',lwd=5,add=TRUE)
n = 10000
x1 = runif(n, min =0 , max =1 )
y1 = runif(n, min =0 , max =1 )
f1 <- 1/exp(x1)
plot(x1[(y1 > f1)],y1[(y1 > f1)],col='yellow',pch=20)
points(x1[(y1 <= f1)],y1[(y1 <= f1)],col='blue',pch=20)
f <- function(x) 1/x
curve(f,0,1,n=100,col='red',lwd=5,add=TRUE)
area_below = length(y1[(y1<=f1)])
area_below/n
f <- function(x) 1/exp(x)
curve(f,0,1,n=100,col='red',lwd=5,add=TRUE)
area_below = length(y1[(y1<=f1)])
area_below/n
exp(-1)
-0.3678794 - -1
n = 100000
x1 = runif(n, min =0 , max =1 )
y1 = runif(n, min =0 , max =1 )
f1 <- 1/exp(x1)
plot(x1[(y1 > f1)],y1[(y1 > f1)],col='yellow',pch=20)
points(x1[(y1 <= f1)],y1[(y1 <= f1)],col='blue',pch=20)
f <- function(x) 1/exp(x)
curve(f,0,1,n=100,col='red',lwd=5,add=TRUE)
area_below = length(y1[(y1<=f1)])
area_below/n
area_below/n
library(RWordPress)
library(knitr)
options(WordpressLogin = c(mmburublog = 'science100data'),
WordpressURL = 'https://mmburublog.wordpress.com/xmlrpc.php')
opts_knit$set(upload.fun = imgur_upload, base.url = NULL) # upload all images to imgur.com
opts_chunk$set(fig.width= 7.5, fig.height=4.5, cache=TRUE)
knit2wp("E:/R/german credit data/geerman credit.Rmd",
title = 'German credit loan prediction, Part One using logistic regression', publish = TRUE)
knit2wp("E:/R/german credit data/geerman credit.Rmd",
title = 'German credit loan prediction, Part One using logistic regression', publish = TRUE)
rm(list =ls())
knit2wp("E:/R/german credit data/geerman credit.Rmd",
title = 'German credit loan prediction, Part One using logistic regression', publish = TRUE)
switch("b", a = 1, b = , c = 3)
switch("b", a = 1, b = , c = 3)
switch("b", a = 1, b = 4, c = 3)
switch("b", a = 1, b = , c = 31)
?switch (object,
case = action
)
4+5
10*128/1024
10*1024/128
c1 <- Hmisc::Cs("Poverty", "Peer pressure", "Black mail", "Rape", "Unprotected Sex")
c2 <- c(8, 5, 1, 1,1)
df <- data.frame(c1, c2)
df <- data.frame(c1, c2, perc = round(c2/sum(c2)*100,2))
df
c2 <- c(9, 5, 1, 1,1)
df <- data.frame(c1, c2, perc = round(c2/sum(c2)*100,2))
df
library(ggplot2)
ggplot(df, aes(x1, perc))+
geom_bar()
ggplot(df, aes(c1, perc))+
geom_bar()
ggplot(df, aes(c1, perc))+
geom_bar(stat = "identity")
library(ggthemes)
ggplot(df, aes(c1, perc))+
geom_bar(stat = "identity")+
theme_economist()
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
scale_fill_economist()
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
scale_fill_economist()+
theme(legend.position = "none")
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
geom_text(data = df, aes(c1, perc, labels = paste(perc, "%")),
position = position_dodge(width = 0.5))+
scale_fill_economist()+
theme(legend.position = "none")
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
geom_text(data = df, aes(c1, perc, label = paste(perc, "%")),
position = position_dodge(width = 0.5))+
scale_fill_economist()+
theme(legend.position = "none")
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
geom_text(data = df, aes(c1, perc, label = paste(perc, "%")),
position = position_dodge(width = 0.5), vjust = 0.05, hjust = 0.05)+
scale_fill_economist()+
theme(legend.position = "none")
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
geom_text(data = df, aes(c1, perc, label = paste(perc, "%")),
position = position_dodge(width = 0.5), vjust = 0.05, hjust = 0.07)+
scale_fill_economist()+
theme(legend.position = "none")
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
geom_text(data = df, aes(c1, perc, label = paste(perc, "%")),
position = position_dodge(width = 0.5), vjust = 0.05, hjust = 0.1)+
scale_fill_economist()+
theme(legend.position = "none")
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
geom_text(data = df, aes(c1, perc, label = paste(perc, "%")),
position = position_dodge(width = 0.5), vjust = 0.05, hjust = 0.5)+
scale_fill_economist()+
theme(legend.position = "none")
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
geom_text(data = df, aes(c1, perc, label = paste(perc, "%")),
position = position_dodge(width = 0.5), vjust = 0.05, hjust = 0.5)+
labs(list(x = "Factors that lead to pregnancy",  y = "Percentage"))
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
geom_text(data = df, aes(c1, perc, label = paste(perc, "%")),
position = position_dodge(width = 0.5), vjust = 0.05, hjust = 0.5)+
labs(list(x = "Factors that lead to pregnancy",  y = "Percentage"))+
scale_fill_economist()+
theme(legend.position = "none")
df <- data.frame(c1, c2, perc = round(c2/20*100,2))
df
c2 <- c(9, 5, 2, 3,2)
df <- data.frame(c1, c2, perc = round(c2/20*100,2))
df
df <- data.frame(c1, c2, perc = round(c2/15*100,2))
df
library(ggplot2)
library(ggthemes)
ggplot(df, aes(c1, perc, fill = c1))+
geom_bar(stat = "identity")+
theme_economist()+
geom_text(data = df, aes(c1, perc, label = paste(perc, "%")),
position = position_dodge(width = 0.5), vjust = 0.05, hjust = 0.5)+
labs(list(x = "Factors that lead to pregnancy",  y = "Percentage"))+
scale_fill_economist()+
theme(legend.position = "none")
94+115
library(tensorflow)
?install_tensorflow
install_tensorflow( method = "conda")
install_tensorflow( method = "conda")
tax <- function(x){
tax = 0
var = 0
while ( var > 0) {
}
}
set.seed (1)
x= matrix ( rnorm (10000) , ncol =2)
y=c( rep ( -1 ,5000) , rep (1 ,5000) )
dat = data.frame (x=x, y=as.factor (y))
dat$x.1[dat$y==1] <- dat$x.1[dat$y==1]  +2
dat$x.2[dat$y==1] <- dat$x.2[dat$y==1]  +2
plot(dat$x.1, dat$x.2, col =as.factor(dat$y), pch = 19)
library ( e1071 )
svmfit =svm (y~., data=dat , kernel ="linear", cost =10,
scale =FALSE )
plot(svmfit , dat )
tune.out = tune(svm ,y~., data=dat , kernel ="linear",
ranges =list (cost=c(0.001 , 0.01 , 0.1, 1 ,5 ,10 ,100),
gamma = c(0.001 , 0.01 , 0.1, 1 ,5 ,10 ,100)))
tune.out
svmfit =svm (y~., data=dat , kernel ="radial", cost = 5,
gamma = 0.001,
scale =FALSE )
plot(svmfit, data = dat)
dat$y <- as.factor(dat$y)
svmfit =svm (y~., data=dat , kernel ="radial", cost = 5,
gamma = 0.001,
scale =FALSE )
plot(svmfit, data = dat)
plot(svmfit, data = dat)
pred = predict(svmfit)
mean(pred == y)
glmfit = glm(y~., data=dat ,  family = binomial)
pred = predict(glmfit, type = "response")
pred = ifelse(pred > 0.5, 1, -1)
mean(pred == y)
pred = ifelse(pred > 0.7, 1, -1)
mean(pred == y)
pred = predict(glmfit, type = "response")
pred = ifelse(pred > 0.7, 1, -1)
mean(pred == y)
pred = ifelse(pred > 0.9, 1, -1)
mean(pred == y)
pred = predict(glmfit, type = "response")
pred = ifelse(pred > 0.9, 1, -1)
mean(pred == y)
plot(dat$x.1, dat$x.2, col =as.factor(dat$y), pch = 19)
svmfit$coefs
x
beta = drop(t(svmfit$coefs) %x% x[svmfit$index,])
dim(x)
dim(svmfit$index)
length(svmfit$index)
ft <- x[svmfit$index,]
max(ft)
max(svmfit$index)
make.grid <- function(x, n= 75){
grange = apply(x, 2, range)
x1 = seq(from = grange[1, 1], to = grange[2, 1], length.out = n)
x2 = seq(from = grange[1, 2], to = grange[2, 2], length.out = n)
expand.grid(X1 = x1, X2 = x2)
}
xgrid = make.grid(x)
make.grid <- function(x, n= 4500){
grange = apply(x, 2, range)
x1 = seq(from = grange[1, 1], to = grange[2, 1], length.out = n)
x2 = seq(from = grange[1, 2], to = grange[2, 2], length.out = n)
expand.grid(X1 = x1, X2 = x2)
}
xgrid = make.grid(x)
make.grid <- function(x, n= 100){
grange = apply(x, 2, range)
x1 = seq(from = grange[1, 1], to = grange[2, 1], length.out = n)
x2 = seq(from = grange[1, 2], to = grange[2, 2], length.out = n)
expand.grid(X1 = x1, X2 = x2)
}
xgrid = make.grid(x)
ygrid = predict(svmfit, newdata = xgrid)
make.grid <- function(x, n= 100){
grange = apply(x, 2, range)
x1 = seq(from = grange[1, 1], to = grange[2, 1], length.out = n)
x2 = seq(from = grange[1, 2], to = grange[2, 2], length.out = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
ygrid = predict(svmfit, newdata = xgrid)
ft <- x[svmfit$index,]
max(svmfit$index)
ft <- xgrid[svmfit$index,]
beta = drop(t(svmfit$coefs) %x% ft )
t(svmfit$coefs) %x% ft
gf <- t(svmfit$coefs)
gf <- t(svmfit$coefs) %>%as.matrix()
library(dplyr)
ft <- xgrid[svmfit$index,]
gf <- t(svmfit$coefs) %>%as.matrix()
ft <- xgrid[svmfit$index,] %>%as.matrix()
beta = drop( gf%x% ft )
plot(xgrid, col =as.factor(dat$y), pch = 19)
beta0 = svmfit$rho
abline(beta0/beta[2], -beta[1]/beta[2])
abline(beta0/beta[2], -beta[1]/beta[2], col = "blue")
plot(xgrid, col =as.factor(ygrid), pch = 19)
abline(beta0/beta[2], -beta[1]/beta[2], col = "blue")
abline((beta0-1)/beta[2], -beta[1]/beta[2], col = "blue")
abline((beta0+1)/beta[2], -beta[1]/beta[2], col = "green")
abline(beta0/beta[2], -beta[1]/beta[2], col = "gray")
abline((beta0-1)/beta[2], -beta[1]/beta[2], col = "blue")
abline((beta0+1)/beta[2], -beta[1]/beta[2], col = "green")
x= matrix ( rnorm (40) , ncol =2)
y=c( rep ( -1 ,20) , rep (1 ,20) )
dat = data.frame (x=x, y=as.factor (y))
dat$x.1[dat$y==1] <- dat$x.1[dat$y==1]  +1
dat$x.2[dat$y==1] <- dat$x.2[dat$y==1]  +1
plot(dat$x.1, dat$x.2, col =as.factor(dat$y), pch = 19)
library ( e1071 )
svmfit =svm (y~., data=dat , kernel ="linear", cost =10,
scale =FALSE )
plot(svmfit , dat )
tune.out = tune(svm ,y~., data=dat , kernel ="linear",
ranges =list (cost=c(0.001 , 0.01 , 0.1, 1 ,5 ,10 ,100),
gamma = c(0.001 , 0.01 , 0.1, 1 ,5 ,10 ,100)))
tune.out
dat$y <- as.factor(dat$y)
svmfit =svm (y~., data=dat , kernel ="radial", cost = 1,
gamma = 0.001,
scale =FALSE )
plot(svmfit, data = dat)
pred = predict(svmfit)
mean(pred == y)
make.grid <- function(x, n= 75){
grange = apply(x, 2, range)
x1 = seq(from = grange[1, 1], to = grange[2, 1], length.out = n)
x2 = seq(from = grange[1, 2], to = grange[2, 2], length.out = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
ygrid = predict(svmfit, newdata = xgrid)
max(svmfit$index)
library(dplyr)
ft <- xgrid[svmfit$index,] %>%as.matrix()
gf <- t(svmfit$coefs) %>%as.matrix()
beta = drop( gf%x% ft )
beta0 = svmfit$rho
plot(xgrid, col =as.factor(ygrid), pch = 19)
plot(xgrid, col =as.factor(ygrid+3), pch = 19)
plot(xgrid, col =as.factor(y+3), pch = 19)
plot(xgrid, col =as.factor(y), pch = 19)
plot(xgrid, col =as.factor(y), pch = 19)
plot(xgrid, col =y+3, pch = 19)
y <- as.factor(y)
plot(xgrid, col =y+3, pch = 19)
plot(xgrid, col =y, pch = 19)
plot(xgrid,  pch = 19)
xgrid = make.grid(x)
ygrid = predict(svmfit, newdata = xgrid)
max(svmfit$index)
library(dplyr)
ft <- xgrid[svmfit$index,] %>%as.matrix()
gf <- t(svmfit$coefs) %>%as.matrix()
beta = drop( gf%x% ft )
beta0 = svmfit$rho
y <- as.factor(y)
plot(xgrid,  pch = 19)
y=c( rep ( -1 ,20) , rep (1 ,20) )
plot(xgrid,  pch = 19)
plot(xgrid,col = y+2,  pch = 19)
plot(xgrid,col = c("red", "blue")[as.numeric(ygrid)],  pch = 19)
abline(beta0/beta[2], -beta[1]/beta[2], col = "gray")
abline((beta0-1)/beta[2], -beta[1]/beta[2], col = "blue")
abline((beta0+1)/beta[2], -beta[1]/beta[2], col = "green")
plot(xgrid,col = c("red", "blue")[as.numeric(ygrid)],  pch = 19, cex = 0.2)
plot(xgrid,col = c("red", "blue")[as.numeric(ygrid)],  pch = 19, cex = 0.1)
plot(xgrid,col = c("red", "blue")[as.numeric(ygrid)],  pch = 20, cex = 0.1)
plot(xgrid,col = c("red", "blue")[as.numeric(ygrid)],  pch = 20, cex = 0.2)
abline(beta0/beta[2], -beta[1]/beta[2], col = "gray")
abline((beta0-1)/beta[2], -beta[1]/beta[2], col = "blue")
abline((beta0+1)/beta[2], -beta[1]/beta[2], col = "green")
?append
setwd("C:/Users/mmbur/Desktop/work/Sergovia")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.1')
library(xlsx)
library(pacman)
p_load(data.table, stringr, magrittr, stringdist, checkmate, foreach, ggplot2, zoo, knitr, plyr,
dplyr, ggthemes, readxl, stringi, Hmisc, xlsx,
doParallel, tidyr)
diaries <- setDT(read_excel("L-IFT-Uganda Survey Instrument – Akola Project version-Jan-19_2019_06_02_08_31.xlsx"))
diaries[, Duration := gsub("1899-12-31 | UTC" ,"" ,Duration)]
diaries$Duration <- gsub("_","", diaries$Duration)
ys2 <- strsplit(diaries$Duration, ":")
ys2 <- lapply(ys2, as.numeric)
d2 <- c()
for (i in 1:length(ys2)) {
d = ys2[[i]]
d2[i] =  d[1] *60 + d[2] + d[3]/60
}
dir()
diaries <- setDT(read_excel("L-IFT-Uganda Survey Instrument – Akola Project version-Jan-19_2019_07_02_14_45.xlsx" ))
diaries[, Duration := gsub("1899-12-31 | UTC" ,"" ,Duration)]
diaries$Duration <- gsub("_","", diaries$Duration)
ys2 <- strsplit(diaries$Duration, ":")
ys2 <- lapply(ys2, as.numeric)
d2 <- c()
for (i in 1:length(ys2)) {
d = ys2[[i]]
d2[i] =  d[1] *60 + d[2] + d[3]/60
}
diaries <- diaries[dur > 5,]
diaries[, dur := d2]
diaries <- diaries[dur > 5,]
View(diaries)
diaries <- setDT(read_excel("L-IFT-Uganda Survey Instrument – Akola Project version-Jan-19_2019_07_02_14_45.xlsx" ))
diaries[, Duration := gsub("1899-12-31 | UTC" ,"" ,Duration)]
diaries$Duration <- gsub("_","", diaries$Duration)
ys2 <- strsplit(diaries$Duration, ":")
ys2 <- lapply(ys2, as.numeric)
d2 <- c()
for (i in 1:length(ys2)) {
d = ys2[[i]]
d2[i] =  d[1] *60 + d[2] + d[3]/60
}
diaries[, dur := d2]
diaries <- diaries[dur > 4,]
diaries <- setDT(read_excel("L-IFT-Uganda Survey Instrument – Akola Project version-Jan-19_2019_07_02_14_45.xlsx" ))
diaries[, Duration := gsub("1899-12-31 | UTC" ,"" ,Duration)]
diaries$Duration <- gsub("_","", diaries$Duration)
ys2 <- strsplit(diaries$Duration, ":")
ys2 <- lapply(ys2, as.numeric)
d2 <- c()
for (i in 1:length(ys2)) {
d = ys2[[i]]
d2[i] =  d[1] *60 + d[2] + d[3]/60
}
diaries[, dur := d2]
diaries <- diaries[dur > 3,]
diaries <- setDT(read_excel("L-IFT-Uganda Survey Instrument – Akola Project version-Jan-19_2019_07_02_14_45.xlsx" ))
diaries[, Duration := gsub("1899-12-31 | UTC" ,"" ,Duration)]
diaries$Duration <- gsub("_","", diaries$Duration)
ys2 <- strsplit(diaries$Duration, ":")
ys2 <- lapply(ys2, as.numeric)
d2 <- c()
for (i in 1:length(ys2)) {
d = ys2[[i]]
d2[i] =  d[1] *60 + d[2] + d[3]/60
}
diaries[, dur := d2]
diaries <- diaries[dur > 3,]
diaries <- setDT(read_excel("L-IFT-Uganda Survey Instrument – Akola Project version-Jan-19_2019_07_02_14_45.xlsx" ))
diaries[, Duration := gsub("1899-12-31 | UTC" ,"" ,Duration)]
diaries$Duration <- gsub("_","", diaries$Duration)
ys2 <- strsplit(diaries$Duration, ":")
ys2 <- lapply(ys2, as.numeric)
d2 <- c()
for (i in 1:length(ys2)) {
d = ys2[[i]]
d2[i] =  d[1] *60 + d[2] + d[3]/60
}
diaries[, dur := d2]
diaries <- diaries[dur > 3,]
View(diaries)
View(diaries)
summary(diaries$dur)
df <- diaries %>% group_by(Srvyr) %>%
summarise(freq = n(), Duration = round(mean(dur, na.rm = T), 2),
total = round(sum(dur, na.rm = T), 2)) %>%
mutate(Total =cumsum(freq))
write.xlsx(as.data.frame(df), file = "completed surveys time.xlsx", row.names = F)
diaries[, VEnd := as.POSIXct(VEnd)]
View(diaries)
summary(diaries$VEnd)
write.xlsx(as.data.frame(diaries), file = "Akola Segovia Survey.xlsx", row.names = F)
diaries2 <- diaries
diaries2[, VEnd := as.Date(VEnd)]
df <- diaries2 %>% group_by(Srvyr, VEnd) %>%
summarise(freq = n(), Duration = round(mean(dur, na.rm = T), 2),
total = round(sum(dur, na.rm = T), 2)) %>%
mutate(Total =cumsum(freq))
write.xlsx(as.data.frame(df), file = "completed surveys time.xlsx", row.names = F)
write.xlsx(as.data.frame(df), file = "completed surveys time.xlsx", row.names = F)
write.xlsx(as.data.frame(diaries), file = "Akola Segovia Survey.xlsx", row.names = F)
setwd("E:/R/breast cancer")
setwd("/media/mburu/mburu/school/R/handwriting")
dir()
pacman::p_load(readr)
cancer <- read_csv("data.csv")
View(cancer)
cancer <- setDT(read_csv("data.csv"))
cancer[, X33 := NULL]
View(cancer)
View(cancer)
status <- cancer %>%  group_by(diagnosis) %>% summarise(freq = n()) %>%
mutate(perc = round(100 * freq/sum(freq), 2))
